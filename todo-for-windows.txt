How to install neovim on windows, without wsl
* Download zip from https://github.com/neovim/neovim
* Extract
  > We can now run newvim by doubleclick nvim.exe, or nvim-qt.exe
  > Add to task bar
* Download and extract code in VimRoot, note the extracted director
  > It should be the "windows" branch
* In nvim, run :h vimrc, this should show where init.vim should be placed
  > C:\Users\46709\AppData\Local\nvim
* Create the file init.vim in above directory. The content should be something similar to

set runtimepath^=C:\EdvardsProgram\HOME\.vim
let &packpath = &runtimepath
source C:\EdvardsProgram\VimRoot-wsl\VimRoot-wsl\vimrc

* The source row should match with the VimRoot directory
* Create a HOME environment variable, create a corresponding directory
* In HOME directory, create directories
  > .vim
  > .virtualenvs
* Download and extract VimFiles from github
  > Find directory containing common.vim, cut&paste everything into the .vim directory
* Open Microsoft Store, install python
* Open cmd, go to .virtualenvs, then
  > python -m venv ./pynvim
  > run activate.bat in Scripts/
  > pip install pynvim
* Fix libfzf.dll
  > Alt 1. Copy libfzf.dll from other place, and place it in the telescope-native-fzf.nvim/build directory
  > Alt 2. Install cmake and Msys2, including c compiler
    > (Msys2) https://code.visualstudio.com/docs/cpp/config-mingw
  > Run make commands, 3 different, taken from the "do" clause in telescope.vim in VimFiles
  > Add -G "MinGW Makefiles", from https://stackoverflow.com/questions/69338088/error-while-configuring-cmake-project-running-nmake-failed
  > cmake -G "MinGW Makefiles" -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build
* Portable git bash
  > https://git-scm.com/download/win
  > Choose portable version
* Create folder "java_files" in HOME
* Download and install java-sdk 17
  > https://www.oracle.com/java/technologies/downloads/#jdk17-windows
* Download java language server, jdtls
  > https://download.eclipse.org/jdtls/snapshots/?d
  > jdt-language-server-1.19.0-202301171536.tar.gz (not latest!)
  > unpack the tar.gz file with tar -xvzf in windows 
* Download and unpack ripgrep, add to path
  > https://github.com/BurntSushi/ripgrep/releases
  > Locate path to rg.exe, add to path env variable
* Ensure that all file references in java_jdtls.lua is correct
* Create directory ~\.cache\nvim\
* download debug java bundle
  > https://repo1.maven.org/maven2/com/microsoft/java/com.microsoft.java.debug.plugin/0.44.0/
  > file: com.microsoft.java.debug.plugin-0.44.0.jar
  > put it in ~\.cachec\nvim
* Download vscode-java-test
  > https://github.com/microsoft/vscode-java-test
  > put it in ~\.cachec\nvim

Sandvik fixes
* On sandvik computer, find out which commands are issued when running launch configurations
  > https://stackoverflow.com/questions/1989419/eclipse-is-there-a-way-to-get-eclipse-to-output-the-commands-given-to-run-your
* Pluginstall, in git bash give these commands
  > git config --global http.sslBackend schannel
  > git config --global http.sslcainfo "/c/Users/yh6032/HOME/bin/PortableGit/mingw64/ssl/certs"
  > Adjust path above for whereever the git bash is installed

Running jdtls on Sandvik
* Commands for updating pom structure and other files
  > hide_jdtls_files
  > unhide_jdtls_files
* Install Ant
  > Download from apache website, unpack
  > Set ANT_HOME, to directory above the bin directory
  > Add to path, %ANT_HOME%\bin
  > JAVA_HOME need to be defined, as an entry on the PATH, including %JAVA_HOME%\bin
* Run build command
  > From yappclipse, export a Ant build file
    - go to a project
    - File/Export ...
    - General/Ant buildfile
    - The original pom.xml files must be active, hide_jdtls should not be triggered
    - Paths to projects in same parent project has to be updated (refer to the project's bin dir)
    - Paths to jar files that resides in my personal repo has to be updated. (insert.manufacturing.util)
  > From command line (as far as I have reached for the moment), ...
  > ant init-eclipse-compiler
  > ant build-eclipse-compiler
* Create non-existent jar-files (for example insert.measuring.util)
  > Download and go to repository, open in yappclipse
  > Export ant build.xml file
  > Add target for building a jar-file

<target name="jar">
  <jar destfile="${HOME}/myrepo/insert.measuring.util_4.0.0.jar" basedir="bin">
  </jar>
</target>

  > Refer to insert.measuring.util_4.0.0.jar in build.xml for my project

The nvim-adapt repo
* Contains a copy of the file structure as in i290.manufacturing
* Contains modified pom.xml files for parent and all sub-projects
  > They are called tom.xml
  > There is a command in .vim that overwrites all pom.xml to the contents of tom.xml
* Contains ant build.xml files for parent and all sub-projects
  > They contains targets for compiling the projects
  > First they were generated from yappclipse, but are later modified
  > Targets for copy and modifiy run-configurations
  > Targets for self-deploy nvim-adapt --> target branch
  > Targets for back-deploy from target branch --> nvim-adapt
* All files from nvim-adapt that are copied to i290.manufacturing are hidden, 
  > Added to global gitignore

Procedure to adapt to language server
* "Infect" with files from nvim-adapt
  > in prepare_jdtls.lua, call update_branch, binding is defined in mysandvik_settings.lua
* Call hide_jdtls_files, binding is defined in mysanvik_settings.lua
* Delete java_files entry, binding is defined in mysanvik_settings.lua

Usage of git worktree
# Motive
When adapting to the language server, the pom.xml files are adapted, and then marked temporarily by git to not trace changes. This works well as long as I don't change branch, and the original poms are updated in the other branch. I.e. there has been an "update version" commit. Then I have to first un-hide the pom, switch branch, and the hide the poms again, which is overly cumbersome for just switching a branch. This problem is circurvented by using git worktree.

# nvim implementation
I use ThePrimeagen/git-worktree.nvim for handling git worktrees in vim. However, this code cant handle windows file paths. Therefore I have hacked this code, residing in GitEdvard/git-worktree.windows.nvim.
